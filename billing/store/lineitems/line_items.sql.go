// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: line_items.sql

package lineitems

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createLineItem = `-- name: CreateLineItem :one

INSERT INTO line_items (
    bill_id,
    amount_cents,
    currency,
    description,
    incurred_at,
    reference_id,
    idempotency_key
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, bill_id, amount_cents, currency, description, incurred_at, reference_id, idempotency_key, created_at, updated_at
`

type CreateLineItemParams struct {
	BillID         pgtype.Int4
	AmountCents    int64
	Currency       string
	Description    pgtype.Text
	IncurredAt     pgtype.Timestamptz
	ReferenceID    pgtype.Text
	IdempotencyKey string
}

// Line items related queries
func (q *Queries) CreateLineItem(ctx context.Context, arg CreateLineItemParams) (LineItem, error) {
	row := q.db.QueryRow(ctx, createLineItem,
		arg.BillID,
		arg.AmountCents,
		arg.Currency,
		arg.Description,
		arg.IncurredAt,
		arg.ReferenceID,
		arg.IdempotencyKey,
	)
	var i LineItem
	err := row.Scan(
		&i.ID,
		&i.BillID,
		&i.AmountCents,
		&i.Currency,
		&i.Description,
		&i.IncurredAt,
		&i.ReferenceID,
		&i.IdempotencyKey,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteLineItem = `-- name: DeleteLineItem :exec
DELETE FROM line_items WHERE id = $1
`

func (q *Queries) DeleteLineItem(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteLineItem, id)
	return err
}

const getLineItem = `-- name: GetLineItem :one
SELECT id, bill_id, amount_cents, currency, description, incurred_at, reference_id, idempotency_key, created_at, updated_at FROM line_items WHERE id = $1
`

func (q *Queries) GetLineItem(ctx context.Context, id int32) (LineItem, error) {
	row := q.db.QueryRow(ctx, getLineItem, id)
	var i LineItem
	err := row.Scan(
		&i.ID,
		&i.BillID,
		&i.AmountCents,
		&i.Currency,
		&i.Description,
		&i.IncurredAt,
		&i.ReferenceID,
		&i.IdempotencyKey,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getLineItemsByBill = `-- name: GetLineItemsByBill :many
SELECT id, bill_id, amount_cents, currency, description, incurred_at, reference_id, idempotency_key, created_at, updated_at FROM line_items WHERE bill_id = $1 ORDER BY incurred_at DESC
`

func (q *Queries) GetLineItemsByBill(ctx context.Context, billID pgtype.Int4) ([]LineItem, error) {
	rows, err := q.db.Query(ctx, getLineItemsByBill, billID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LineItem
	for rows.Next() {
		var i LineItem
		if err := rows.Scan(
			&i.ID,
			&i.BillID,
			&i.AmountCents,
			&i.Currency,
			&i.Description,
			&i.IncurredAt,
			&i.ReferenceID,
			&i.IdempotencyKey,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTotalAmountByBill = `-- name: GetTotalAmountByBill :one
SELECT COALESCE(SUM(amount_cents), 0) as total_amount_cents 
FROM line_items 
WHERE bill_id = $1
`

func (q *Queries) GetTotalAmountByBill(ctx context.Context, billID pgtype.Int4) (interface{}, error) {
	row := q.db.QueryRow(ctx, getTotalAmountByBill, billID)
	var total_amount_cents interface{}
	err := row.Scan(&total_amount_cents)
	return total_amount_cents, err
}

const updateLineItem = `-- name: UpdateLineItem :one
UPDATE line_items 
SET amount_cents = $2, description = $3, updated_at = NOW()
WHERE id = $1 
RETURNING id, bill_id, amount_cents, currency, description, incurred_at, reference_id, idempotency_key, created_at, updated_at
`

type UpdateLineItemParams struct {
	ID          int32
	AmountCents int64
	Description pgtype.Text
}

func (q *Queries) UpdateLineItem(ctx context.Context, arg UpdateLineItemParams) (LineItem, error) {
	row := q.db.QueryRow(ctx, updateLineItem, arg.ID, arg.AmountCents, arg.Description)
	var i LineItem
	err := row.Scan(
		&i.ID,
		&i.BillID,
		&i.AmountCents,
		&i.Currency,
		&i.Description,
		&i.IncurredAt,
		&i.ReferenceID,
		&i.IdempotencyKey,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
