// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: currencies.sql

package currencies

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCurrency = `-- name: CreateCurrency :one
INSERT INTO currencies (
    code,
    symbol,
    rate,
    enabled
) VALUES (
    $1, $2, $3, $4
) RETURNING id, code, symbol, rate, enabled
`

type CreateCurrencyParams struct {
	Code    pgtype.Text
	Symbol  pgtype.Text
	Rate    pgtype.Numeric
	Enabled bool
}

func (q *Queries) CreateCurrency(ctx context.Context, arg CreateCurrencyParams) (Currency, error) {
	row := q.db.QueryRow(ctx, createCurrency,
		arg.Code,
		arg.Symbol,
		arg.Rate,
		arg.Enabled,
	)
	var i Currency
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Symbol,
		&i.Rate,
		&i.Enabled,
	)
	return i, err
}

const getAllEnabledCurrencies = `-- name: GetAllEnabledCurrencies :many
SELECT id, code, symbol, rate, enabled FROM currencies WHERE enabled = true ORDER BY code
`

func (q *Queries) GetAllEnabledCurrencies(ctx context.Context) ([]Currency, error) {
	rows, err := q.db.Query(ctx, getAllEnabledCurrencies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Currency
	for rows.Next() {
		var i Currency
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Symbol,
			&i.Rate,
			&i.Enabled,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCurrency = `-- name: GetCurrency :one

SELECT id, code, symbol, rate, enabled FROM currencies WHERE code = $1 AND enabled = true
`

// Currencies related queries
func (q *Queries) GetCurrency(ctx context.Context, code pgtype.Text) (Currency, error) {
	row := q.db.QueryRow(ctx, getCurrency, code)
	var i Currency
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Symbol,
		&i.Rate,
		&i.Enabled,
	)
	return i, err
}

const updateCurrencyRate = `-- name: UpdateCurrencyRate :one
UPDATE currencies 
SET rate = $2, updated_at = NOW()
WHERE code = $1 
RETURNING id, code, symbol, rate, enabled
`

type UpdateCurrencyRateParams struct {
	Code pgtype.Text
	Rate pgtype.Numeric
}

func (q *Queries) UpdateCurrencyRate(ctx context.Context, arg UpdateCurrencyRateParams) (Currency, error) {
	row := q.db.QueryRow(ctx, updateCurrencyRate, arg.Code, arg.Rate)
	var i Currency
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Symbol,
		&i.Rate,
		&i.Enabled,
	)
	return i, err
}
