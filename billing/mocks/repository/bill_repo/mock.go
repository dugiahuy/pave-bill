// Code generated by MockGen. DO NOT EDIT.
// Source: billing/repository/bills/querier.go
//
// Generated by this command:
//
//	mockgen -source=billing/repository/bills/querier.go -destination=billing/mocks/repository/bill_repo/mock.go -package=bill_repo
//

// Package bill_repo is a generated GoMock package.
package bill_repo

import (
	context "context"
	reflect "reflect"

	bills "encore.app/billing/repository/bills"
	pgtype "github.com/jackc/pgx/v5/pgtype"
	gomock "go.uber.org/mock/gomock"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
	isgomock struct{}
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// CountBills mocks base method.
func (m *MockQuerier) CountBills(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountBills", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountBills indicates an expected call of CountBills.
func (mr *MockQuerierMockRecorder) CountBills(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountBills", reflect.TypeOf((*MockQuerier)(nil).CountBills), ctx)
}

// CreateBill mocks base method.
func (m *MockQuerier) CreateBill(ctx context.Context, arg bills.CreateBillParams) (bills.Bill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBill", ctx, arg)
	ret0, _ := ret[0].(bills.Bill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBill indicates an expected call of CreateBill.
func (mr *MockQuerierMockRecorder) CreateBill(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBill", reflect.TypeOf((*MockQuerier)(nil).CreateBill), ctx, arg)
}

// GetBill mocks base method.
func (m *MockQuerier) GetBill(ctx context.Context, id int32) (bills.Bill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBill", ctx, id)
	ret0, _ := ret[0].(bills.Bill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBill indicates an expected call of GetBill.
func (mr *MockQuerierMockRecorder) GetBill(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBill", reflect.TypeOf((*MockQuerier)(nil).GetBill), ctx, id)
}

// GetBillByIdempotencyKey mocks base method.
func (m *MockQuerier) GetBillByIdempotencyKey(ctx context.Context, idempotencyKey string) (bills.Bill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBillByIdempotencyKey", ctx, idempotencyKey)
	ret0, _ := ret[0].(bills.Bill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBillByIdempotencyKey indicates an expected call of GetBillByIdempotencyKey.
func (mr *MockQuerierMockRecorder) GetBillByIdempotencyKey(ctx, idempotencyKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBillByIdempotencyKey", reflect.TypeOf((*MockQuerier)(nil).GetBillByIdempotencyKey), ctx, idempotencyKey)
}

// GetBillForUpdate mocks base method.
func (m *MockQuerier) GetBillForUpdate(ctx context.Context, id int32) (bills.Bill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBillForUpdate", ctx, id)
	ret0, _ := ret[0].(bills.Bill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBillForUpdate indicates an expected call of GetBillForUpdate.
func (mr *MockQuerierMockRecorder) GetBillForUpdate(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBillForUpdate", reflect.TypeOf((*MockQuerier)(nil).GetBillForUpdate), ctx, id)
}

// ListBills mocks base method.
func (m *MockQuerier) ListBills(ctx context.Context, arg bills.ListBillsParams) ([]bills.Bill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBills", ctx, arg)
	ret0, _ := ret[0].([]bills.Bill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBills indicates an expected call of ListBills.
func (mr *MockQuerierMockRecorder) ListBills(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBills", reflect.TypeOf((*MockQuerier)(nil).ListBills), ctx, arg)
}

// UpdateBillClosure mocks base method.
func (m *MockQuerier) UpdateBillClosure(ctx context.Context, arg bills.UpdateBillClosureParams) (bills.Bill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBillClosure", ctx, arg)
	ret0, _ := ret[0].(bills.Bill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBillClosure indicates an expected call of UpdateBillClosure.
func (mr *MockQuerierMockRecorder) UpdateBillClosure(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBillClosure", reflect.TypeOf((*MockQuerier)(nil).UpdateBillClosure), ctx, arg)
}

// UpdateBillStatus mocks base method.
func (m *MockQuerier) UpdateBillStatus(ctx context.Context, arg bills.UpdateBillStatusParams) (bills.Bill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBillStatus", ctx, arg)
	ret0, _ := ret[0].(bills.Bill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBillStatus indicates an expected call of UpdateBillStatus.
func (mr *MockQuerierMockRecorder) UpdateBillStatus(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBillStatus", reflect.TypeOf((*MockQuerier)(nil).UpdateBillStatus), ctx, arg)
}

// UpdateBillTotal mocks base method.
func (m *MockQuerier) UpdateBillTotal(ctx context.Context, billID pgtype.Int4) (bills.Bill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBillTotal", ctx, billID)
	ret0, _ := ret[0].(bills.Bill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBillTotal indicates an expected call of UpdateBillTotal.
func (mr *MockQuerierMockRecorder) UpdateBillTotal(ctx, billID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBillTotal", reflect.TypeOf((*MockQuerier)(nil).UpdateBillTotal), ctx, billID)
}
