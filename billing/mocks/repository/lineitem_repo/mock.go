// Code generated by MockGen. DO NOT EDIT.
// Source: billing/repository/lineitems/querier.go
//
// Generated by this command:
//
//	mockgen -source=billing/repository/lineitems/querier.go -destination=billing/mocks/repository/lineitem_repo/mock.go -package=lineitem_repo
//

// Package lineitem_repo is a generated GoMock package.
package lineitem_repo

import (
	context "context"
	reflect "reflect"

	lineitems "encore.app/billing/repository/lineitems"
	pgtype "github.com/jackc/pgx/v5/pgtype"
	gomock "go.uber.org/mock/gomock"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
	isgomock struct{}
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// CreateLineItem mocks base method.
func (m *MockQuerier) CreateLineItem(ctx context.Context, arg lineitems.CreateLineItemParams) (lineitems.LineItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLineItem", ctx, arg)
	ret0, _ := ret[0].(lineitems.LineItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLineItem indicates an expected call of CreateLineItem.
func (mr *MockQuerierMockRecorder) CreateLineItem(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLineItem", reflect.TypeOf((*MockQuerier)(nil).CreateLineItem), ctx, arg)
}

// DeleteLineItem mocks base method.
func (m *MockQuerier) DeleteLineItem(ctx context.Context, id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLineItem", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLineItem indicates an expected call of DeleteLineItem.
func (mr *MockQuerierMockRecorder) DeleteLineItem(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLineItem", reflect.TypeOf((*MockQuerier)(nil).DeleteLineItem), ctx, id)
}

// GetLineItem mocks base method.
func (m *MockQuerier) GetLineItem(ctx context.Context, id int32) (lineitems.LineItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLineItem", ctx, id)
	ret0, _ := ret[0].(lineitems.LineItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLineItem indicates an expected call of GetLineItem.
func (mr *MockQuerierMockRecorder) GetLineItem(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLineItem", reflect.TypeOf((*MockQuerier)(nil).GetLineItem), ctx, id)
}

// GetLineItemsByBill mocks base method.
func (m *MockQuerier) GetLineItemsByBill(ctx context.Context, billID pgtype.Int4) ([]lineitems.LineItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLineItemsByBill", ctx, billID)
	ret0, _ := ret[0].([]lineitems.LineItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLineItemsByBill indicates an expected call of GetLineItemsByBill.
func (mr *MockQuerierMockRecorder) GetLineItemsByBill(ctx, billID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLineItemsByBill", reflect.TypeOf((*MockQuerier)(nil).GetLineItemsByBill), ctx, billID)
}

// GetTotalAmountByBill mocks base method.
func (m *MockQuerier) GetTotalAmountByBill(ctx context.Context, billID pgtype.Int4) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalAmountByBill", ctx, billID)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalAmountByBill indicates an expected call of GetTotalAmountByBill.
func (mr *MockQuerierMockRecorder) GetTotalAmountByBill(ctx, billID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalAmountByBill", reflect.TypeOf((*MockQuerier)(nil).GetTotalAmountByBill), ctx, billID)
}

// UpdateLineItem mocks base method.
func (m *MockQuerier) UpdateLineItem(ctx context.Context, arg lineitems.UpdateLineItemParams) (lineitems.LineItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLineItem", ctx, arg)
	ret0, _ := ret[0].(lineitems.LineItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLineItem indicates an expected call of UpdateLineItem.
func (mr *MockQuerierMockRecorder) UpdateLineItem(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLineItem", reflect.TypeOf((*MockQuerier)(nil).UpdateLineItem), ctx, arg)
}
