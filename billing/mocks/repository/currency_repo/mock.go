// Code generated by MockGen. DO NOT EDIT.
// Source: billing/repository/currencies/querier.go
//
// Generated by this command:
//
//	mockgen -source=billing/repository/currencies/querier.go -destination=billing/mocks/repository/currency_repo/mock.go -package=currency_repo
//

// Package currency_repo is a generated GoMock package.
package currency_repo

import (
	context "context"
	reflect "reflect"

	currencies "encore.app/billing/repository/currencies"
	pgtype "github.com/jackc/pgx/v5/pgtype"
	gomock "go.uber.org/mock/gomock"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
	isgomock struct{}
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// GetCurrency mocks base method.
func (m *MockQuerier) GetCurrency(ctx context.Context, code pgtype.Text) (currencies.Currency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrency", ctx, code)
	ret0, _ := ret[0].(currencies.Currency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrency indicates an expected call of GetCurrency.
func (mr *MockQuerierMockRecorder) GetCurrency(ctx, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrency", reflect.TypeOf((*MockQuerier)(nil).GetCurrency), ctx, code)
}
