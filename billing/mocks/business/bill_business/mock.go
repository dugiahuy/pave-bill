// Code generated by MockGen. DO NOT EDIT.
// Source: billing/business/bill/business.go
//
// Generated by this command:
//
//	mockgen -source=billing/business/bill/business.go -destination=billing/mocks/business/bill_business/mock.go -package=bill_business
//

// Package bill_business is a generated GoMock package.
package bill_business

import (
	context "context"
	reflect "reflect"

	model "encore.app/billing/model"
	gomock "go.uber.org/mock/gomock"
)

// MockBusiness is a mock of Business interface.
type MockBusiness struct {
	ctrl     *gomock.Controller
	recorder *MockBusinessMockRecorder
	isgomock struct{}
}

// MockBusinessMockRecorder is the mock recorder for MockBusiness.
type MockBusinessMockRecorder struct {
	mock *MockBusiness
}

// NewMockBusiness creates a new mock instance.
func NewMockBusiness(ctrl *gomock.Controller) *MockBusiness {
	mock := &MockBusiness{ctrl: ctrl}
	mock.recorder = &MockBusinessMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBusiness) EXPECT() *MockBusinessMockRecorder {
	return m.recorder
}

// ActivateBill mocks base method.
func (m *MockBusiness) ActivateBill(ctx context.Context, billID int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateBill", ctx, billID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActivateBill indicates an expected call of ActivateBill.
func (mr *MockBusinessMockRecorder) ActivateBill(ctx, billID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateBill", reflect.TypeOf((*MockBusiness)(nil).ActivateBill), ctx, billID)
}

// AddLineItemToBill mocks base method.
func (m *MockBusiness) AddLineItemToBill(ctx context.Context, billID int32, lineItem *model.LineItem) (*model.LineItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLineItemToBill", ctx, billID, lineItem)
	ret0, _ := ret[0].(*model.LineItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddLineItemToBill indicates an expected call of AddLineItemToBill.
func (mr *MockBusinessMockRecorder) AddLineItemToBill(ctx, billID, lineItem any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLineItemToBill", reflect.TypeOf((*MockBusiness)(nil).AddLineItemToBill), ctx, billID, lineItem)
}

// CloseBill mocks base method.
func (m *MockBusiness) CloseBill(ctx context.Context, id int32, reason string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseBill", ctx, id, reason)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseBill indicates an expected call of CloseBill.
func (mr *MockBusinessMockRecorder) CloseBill(ctx, id, reason any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseBill", reflect.TypeOf((*MockBusiness)(nil).CloseBill), ctx, id, reason)
}

// CreateBill mocks base method.
func (m *MockBusiness) CreateBill(ctx context.Context, bill *model.Bill) (*model.Bill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBill", ctx, bill)
	ret0, _ := ret[0].(*model.Bill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBill indicates an expected call of CreateBill.
func (mr *MockBusinessMockRecorder) CreateBill(ctx, bill any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBill", reflect.TypeOf((*MockBusiness)(nil).CreateBill), ctx, bill)
}

// GetBill mocks base method.
func (m *MockBusiness) GetBill(ctx context.Context, id int32) (*model.Bill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBill", ctx, id)
	ret0, _ := ret[0].(*model.Bill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBill indicates an expected call of GetBill.
func (mr *MockBusinessMockRecorder) GetBill(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBill", reflect.TypeOf((*MockBusiness)(nil).GetBill), ctx, id)
}

// GetLineItemsByBill mocks base method.
func (m *MockBusiness) GetLineItemsByBill(ctx context.Context, billID int32) ([]model.LineItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLineItemsByBill", ctx, billID)
	ret0, _ := ret[0].([]model.LineItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLineItemsByBill indicates an expected call of GetLineItemsByBill.
func (mr *MockBusinessMockRecorder) GetLineItemsByBill(ctx, billID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLineItemsByBill", reflect.TypeOf((*MockBusiness)(nil).GetLineItemsByBill), ctx, billID)
}

// ListBills mocks base method.
func (m *MockBusiness) ListBills(ctx context.Context, limit, offset int32) ([]*model.Bill, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBills", ctx, limit, offset)
	ret0, _ := ret[0].([]*model.Bill)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListBills indicates an expected call of ListBills.
func (mr *MockBusinessMockRecorder) ListBills(ctx, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBills", reflect.TypeOf((*MockBusiness)(nil).ListBills), ctx, limit, offset)
}

// UpdateBillTotal mocks base method.
func (m *MockBusiness) UpdateBillTotal(ctx context.Context, billID int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBillTotal", ctx, billID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBillTotal indicates an expected call of UpdateBillTotal.
func (mr *MockBusinessMockRecorder) UpdateBillTotal(ctx, billID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBillTotal", reflect.TypeOf((*MockBusiness)(nil).UpdateBillTotal), ctx, billID)
}
