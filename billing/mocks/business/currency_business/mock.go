// Code generated by MockGen. DO NOT EDIT.
// Source: billing/business/currency/business.go
//
// Generated by this command:
//
//	mockgen -source=billing/business/currency/business.go -destination=billing/mocks/business/currency_business/mock.go -package=currency_business
//

// Package currency_business is a generated GoMock package.
package currency_business

import (
	context "context"
	reflect "reflect"

	model "encore.app/billing/model"
	gomock "go.uber.org/mock/gomock"
)

// MockBusiness is a mock of Business interface.
type MockBusiness struct {
	ctrl     *gomock.Controller
	recorder *MockBusinessMockRecorder
	isgomock struct{}
}

// MockBusinessMockRecorder is the mock recorder for MockBusiness.
type MockBusinessMockRecorder struct {
	mock *MockBusiness
}

// NewMockBusiness creates a new mock instance.
func NewMockBusiness(ctrl *gomock.Controller) *MockBusiness {
	mock := &MockBusiness{ctrl: ctrl}
	mock.recorder = &MockBusinessMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBusiness) EXPECT() *MockBusinessMockRecorder {
	return m.recorder
}

// ConvertAmount mocks base method.
func (m *MockBusiness) ConvertAmount(ctx context.Context, fromCurrency, toCurrency string, amountCents int64) (*model.ConversionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertAmount", ctx, fromCurrency, toCurrency, amountCents)
	ret0, _ := ret[0].(*model.ConversionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertAmount indicates an expected call of ConvertAmount.
func (mr *MockBusinessMockRecorder) ConvertAmount(ctx, fromCurrency, toCurrency, amountCents any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertAmount", reflect.TypeOf((*MockBusiness)(nil).ConvertAmount), ctx, fromCurrency, toCurrency, amountCents)
}

// GetCurrency mocks base method.
func (m *MockBusiness) GetCurrency(ctx context.Context, code string) (*model.CurrencyInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrency", ctx, code)
	ret0, _ := ret[0].(*model.CurrencyInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrency indicates an expected call of GetCurrency.
func (mr *MockBusinessMockRecorder) GetCurrency(ctx, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrency", reflect.TypeOf((*MockBusiness)(nil).GetCurrency), ctx, code)
}
