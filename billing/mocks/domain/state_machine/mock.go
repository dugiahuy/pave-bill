// Code generated by MockGen. DO NOT EDIT.
// Source: billing/domain/bill_state_machine/bill_state_machine.go
//
// Generated by this command:
//
//	mockgen -source=billing/domain/bill_state_machine/bill_state_machine.go -destination=billing/mocks/domain/state_machine/mock.go -package=state_machine
//

// Package state_machine is a generated GoMock package.
package state_machine

import (
	context "context"
	reflect "reflect"

	bills "encore.app/billing/repository/bills"
	lineitems "encore.app/billing/repository/lineitems"
	pgx "github.com/jackc/pgx/v5"
	gomock "go.uber.org/mock/gomock"
)

// MockStateMachine is a mock of StateMachine interface.
type MockStateMachine struct {
	ctrl     *gomock.Controller
	recorder *MockStateMachineMockRecorder
	isgomock struct{}
}

// MockStateMachineMockRecorder is the mock recorder for MockStateMachine.
type MockStateMachineMockRecorder struct {
	mock *MockStateMachine
}

// NewMockStateMachine creates a new mock instance.
func NewMockStateMachine(ctrl *gomock.Controller) *MockStateMachine {
	mock := &MockStateMachine{ctrl: ctrl}
	mock.recorder = &MockStateMachineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateMachine) EXPECT() *MockStateMachineMockRecorder {
	return m.recorder
}

// GetBillWithLock mocks base method.
func (m *MockStateMachine) GetBillWithLock(ctx context.Context, billID int32, businessLogic func(bills.Bill) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBillWithLock", ctx, billID, businessLogic)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetBillWithLock indicates an expected call of GetBillWithLock.
func (mr *MockStateMachineMockRecorder) GetBillWithLock(ctx, billID, businessLogic any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBillWithLock", reflect.TypeOf((*MockStateMachine)(nil).GetBillWithLock), ctx, billID, businessLogic)
}

// GetCurrentTx mocks base method.
func (m *MockStateMachine) GetCurrentTx() pgx.Tx {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentTx")
	ret0, _ := ret[0].(pgx.Tx)
	return ret0
}

// GetCurrentTx indicates an expected call of GetCurrentTx.
func (mr *MockStateMachineMockRecorder) GetCurrentTx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentTx", reflect.TypeOf((*MockStateMachine)(nil).GetCurrentTx))
}

// GetTxBillRepo mocks base method.
func (m *MockStateMachine) GetTxBillRepo() bills.Querier {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxBillRepo")
	ret0, _ := ret[0].(bills.Querier)
	return ret0
}

// GetTxBillRepo indicates an expected call of GetTxBillRepo.
func (mr *MockStateMachineMockRecorder) GetTxBillRepo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxBillRepo", reflect.TypeOf((*MockStateMachine)(nil).GetTxBillRepo))
}

// GetTxLineItemRepo mocks base method.
func (m *MockStateMachine) GetTxLineItemRepo() lineitems.Querier {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxLineItemRepo")
	ret0, _ := ret[0].(lineitems.Querier)
	return ret0
}

// GetTxLineItemRepo indicates an expected call of GetTxLineItemRepo.
func (mr *MockStateMachineMockRecorder) GetTxLineItemRepo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxLineItemRepo", reflect.TypeOf((*MockStateMachine)(nil).GetTxLineItemRepo))
}

// TransitionToActive mocks base method.
func (m *MockStateMachine) TransitionToActive(ctx context.Context, id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransitionToActive", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransitionToActive indicates an expected call of TransitionToActive.
func (mr *MockStateMachineMockRecorder) TransitionToActive(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransitionToActive", reflect.TypeOf((*MockStateMachine)(nil).TransitionToActive), ctx, id)
}

// TransitionToClosedTx mocks base method.
func (m *MockStateMachine) TransitionToClosedTx(ctx context.Context, id int32, reason string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransitionToClosedTx", ctx, id, reason)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransitionToClosedTx indicates an expected call of TransitionToClosedTx.
func (mr *MockStateMachineMockRecorder) TransitionToClosedTx(ctx, id, reason any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransitionToClosedTx", reflect.TypeOf((*MockStateMachine)(nil).TransitionToClosedTx), ctx, id, reason)
}

// TransitionToClosingTx mocks base method.
func (m *MockStateMachine) TransitionToClosingTx(ctx context.Context, id int32, reason string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransitionToClosingTx", ctx, id, reason)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransitionToClosingTx indicates an expected call of TransitionToClosingTx.
func (mr *MockStateMachineMockRecorder) TransitionToClosingTx(ctx, id, reason any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransitionToClosingTx", reflect.TypeOf((*MockStateMachine)(nil).TransitionToClosingTx), ctx, id, reason)
}

// TransitionToFailureStateTx mocks base method.
func (m *MockStateMachine) TransitionToFailureStateTx(ctx context.Context, id int32, errorMessage string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransitionToFailureStateTx", ctx, id, errorMessage)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransitionToFailureStateTx indicates an expected call of TransitionToFailureStateTx.
func (mr *MockStateMachineMockRecorder) TransitionToFailureStateTx(ctx, id, errorMessage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransitionToFailureStateTx", reflect.TypeOf((*MockStateMachine)(nil).TransitionToFailureStateTx), ctx, id, errorMessage)
}

// UpdateBillTotalTx mocks base method.
func (m *MockStateMachine) UpdateBillTotalTx(ctx context.Context, id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBillTotalTx", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBillTotalTx indicates an expected call of UpdateBillTotalTx.
func (mr *MockStateMachineMockRecorder) UpdateBillTotalTx(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBillTotalTx", reflect.TypeOf((*MockStateMachine)(nil).UpdateBillTotalTx), ctx, id)
}
